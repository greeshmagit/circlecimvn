version: 2.1
orbs:
  docker: circleci/docker@1.7.0
jobs:
  prepare-dependencies:
        docker:
            - image: node:current-alpine
              auth:
                username: pgreeshma
                password: pgr55shma  # context / project UI env-var reference
        steps:
            - checkout
            - run:
                  name: Compute version number
                  command: echo "0.0.${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}" | tee version.txt
            - restore_cache:
                  keys:
                      - yarn-deps-{{ checksum "yarn.lock" }}
                      - yarn-deps
            - run:
                  name: yarn install
                  command: yarn install
            - save_cache:
                  paths:
                      - node_modules
                  key: yarn-deps-{{ checksum "yarn.lock" }}-{{ epoch }}
            - store_artifacts:
                  path: yarn.lock
            - persist_to_workspace:
                  root: .
                  paths:
                      - . 

  build-maven:
    working_directory: ~/cimvn
    #/home/circleci/cimvn/target/cimvn.war
    docker:
      - image: cimg/openjdk:11.0  
        auth:
          username: pgreeshma
          password: pgr55shma
    steps:
      - checkout
      - run: mvn clean package
      
  build-docker:
    docker:
      - image: cimg/openjdk:11.0  
        auth:
          username: pgreeshma
          password: pgr55shma
    steps:
      - checkout
      # ... steps for building/testing app ...
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: docker build
          command: |
              export __BUILD_VERSION="$(cat version.txt)"
                     
      - store_artifacts:
          path: pgreeshma/circlemvn/
      - persist_to_workspace:
          root: /home/circleci/cimvn/target/cimvn.war
          paths:
            - .

  build-docker-image:
    machine:
            # The image uses the current tag, which always points to the most recent
            # supported release. If stability and determinism are crucial for your CI
            # pipeline, use a release date tag with your image, e.g. ubuntu-2004:202201-02
      image: ubuntu:latest
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup __BUILD_VERSION envvar
          command: |
            echo 'export __BUILD_VERSION="$(cat version.txt)"' >> "$BASH_ENV"
      - docker/check:
          registry: pgreeshma
      - docker/build:
          image: circlemvn
          tag: $__BUILD_VERSION
          registry: pgreeshma
      - docker/push:
          image: circlemvn
          tag: $__BUILD_VERSION
          registry: pgreeshma
 
  deploy-docker-image:
    machine:
      image: ubuntu-latest
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Setup __BUILD_VERSION envvar
          command: |
            echo 'export __BUILD_VERSION="$(cat version.txt)"' >> "$BASH_ENV"
      - docker/check:
          registry: pgreeshma
      - docker/pull:
          images: pgreeshma/circlemvn:$__BUILD_VERSION
      - run:
          name: Tag the image as latest
          command: docker tag pgreeshma/circlemvn:$__BUILD_VERSION pgreeshma/circlemvn:latest
      - docker/push:
          image: circlemvn
          tag: latest
          registry: pgreeshma  
  
      
  test:
    docker:
      - image: cimg/openjdk:11.0  
    steps:
      - checkout
      - run: mvn test
  deploy:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run: echo "this is the deploy job"
      - run: docker run -d -p 8080:8080 --name tomcat pgreeshma/circlemvn:v1
workflows:
  build-test-deploy:
        jobs:
            - prepare-dependencies
            - build-maven
            - build-docker:
                  requires:
                      - prepare-dependencies
                      - build-maven
            - build-docker-image:
                  context: docker-hub
                  requires:
                      - build-docker
            - test:
                  requires:
                      - prepare-dependencies
            - deploy-docker-image:
                  context: docker-hub
                  requires:
                      - build-docker-image
                      - test
